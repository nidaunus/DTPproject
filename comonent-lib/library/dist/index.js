/*! For license information please see index.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("@material-ui/core"),require("@material-ui/icons/KeyboardArrowDown"),require("@material-ui/icons/KeyboardArrowUp")):"function"==typeof define&&define.amd?define(["@material-ui/core","@material-ui/icons/KeyboardArrowDown","@material-ui/icons/KeyboardArrowUp"],t):"object"==typeof exports?exports.mylibrary=t(require("@material-ui/core"),require("@material-ui/icons/KeyboardArrowDown"),require("@material-ui/icons/KeyboardArrowUp")):e.mylibrary=t(e["@material-ui/core"],e["@material-ui/icons/KeyboardArrowDown"],e["@material-ui/icons/KeyboardArrowUp"])}(self,(function(e,t,r){return(()=>{var n={418:e=>{"use strict";var t=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var l,i,u=o(e),c=1;c<arguments.length;c++){for(var s in l=Object(arguments[c]))r.call(l,s)&&(u[s]=l[s]);if(t){i=t(l);for(var f=0;f<i.length;f++)n.call(l,i[f])&&(u[i[f]]=l[i[f]])}}return u}},703:(e,t,r)=>{"use strict";var n=r(414);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,r,o,a,l){if(l!==n){var i=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw i.name="Invariant Violation",i}}function t(){return e}e.isRequired=e;var r={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return r.PropTypes=r,r}},697:(e,t,r)=>{e.exports=r(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},408:(e,t,r)=>{"use strict";var n=r(418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var l=60109,i=60110,u=60112;t.Suspense=60113;var c=60115,s=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),l=f("react.provider"),i=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),c=f("react.memo"),s=f("react.lazy")}var p="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var d={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function b(e,t,r){this.props=e,this.context=t,this.refs=m,this.updater=r||d}function h(){}function g(e,t,r){this.props=e,this.context=t,this.refs=m,this.updater=r||d}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},h.prototype=b.prototype;var v=g.prototype=new h;v.constructor=g,n(v,b.prototype),v.isPureReactComponent=!0;var w={current:null},E=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,r){var n,a={},l=null,i=null;if(null!=t)for(n in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(l=""+t.key),t)E.call(t,n)&&!O.hasOwnProperty(n)&&(a[n]=t[n]);var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];a.children=c}if(e&&e.defaultProps)for(n in u=e.defaultProps)void 0===a[n]&&(a[n]=u[n]);return{$$typeof:o,type:e,key:l,ref:i,props:a,_owner:w.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var _=/\/+/g;function T(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function j(e,t,r,n,l){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u=!1;if(null===e)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return l=l(u=e),e=""===n?"."+T(u,0):n,Array.isArray(l)?(r="",null!=e&&(r=e.replace(_,"$&/")+"/"),j(l,t,r,"",(function(e){return e}))):null!=l&&(C(l)&&(l=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(l,r+(!l.key||u&&u.key===l.key?"":(""+l.key).replace(_,"$&/")+"/")+e)),t.push(l)),1;if(u=0,n=""===n?".":n+":",Array.isArray(e))for(var c=0;c<e.length;c++){var s=n+T(i=e[c],c);u+=j(i,t,r,s,l)}else if("function"==typeof(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e)))for(e=s.call(e),c=0;!(i=e.next()).done;)u+=j(i=i.value,t,r,s=n+T(i,c++),l);else if("object"===i)throw t=""+e,Error(y(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function S(e,t,r){if(null==e)return e;var n=[],o=0;return j(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function x(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var k={current:null};function R(){var e=k.current;if(null===e)throw Error(y(321));return e}var $={ReactCurrentDispatcher:k,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:S,forEach:function(e,t,r){S(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return S(e,(function(){t++})),t},toArray:function(e){return S(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error(y(143));return e}},t.Component=b,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=$,t.cloneElement=function(e,t,r){if(null==e)throw Error(y(267,e));var a=n({},e.props),l=e.key,i=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,u=w.current),void 0!==t.key&&(l=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)E.call(t,s)&&!O.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:o,type:e.type,key:l,ref:i,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:i,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=P,t.createFactory=function(e){var t=P.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:s,_payload:{_status:-1,_result:e},_init:x}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return R().useCallback(e,t)},t.useContext=function(e,t){return R().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return R().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return R().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return R().useLayoutEffect(e,t)},t.useMemo=function(e,t){return R().useMemo(e,t)},t.useReducer=function(e,t,r){return R().useReducer(e,t,r)},t.useRef=function(e){return R().useRef(e)},t.useState=function(e){return R().useState(e)},t.version="17.0.1"},294:(e,t,r)=>{"use strict";e.exports=r(408)},731:t=>{"use strict";t.exports=e},777:e=>{"use strict";e.exports=t},311:e=>{"use strict";e.exports=r}},o={};function a(e){var t=o[e];if(void 0!==t)return t.exports;var r=o[e]={exports:{}};return n[e](r,r.exports,a),r.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var r in t)a.o(t,r)&&!a.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var l={};return(()=>{"use strict";a.r(l),a.d(l,{Button:()=>u,Table:()=>h,TextField:()=>f});var e=a(294),t=a(731),r=a(697),n=a.n(r);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var i=r=>{var{text:n,color:a,startIcon:l,variant:i}=r,u=function(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(r,["text","color","startIcon","variant"]);return e.createElement(t.Button,o({variant:i,color:a,startIcon:l},u),n)};i.propTypes={text:n().string,color:n().string,onClick:n().func,variant:n().string},i.defaultProps={color:"primary",text:"DTPButton",onClick:void 0,variant:"contained"};const u=i;function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var s=r=>{var{label:n,variant:o,id:a,required:l,defaultValue:i}=r,u=function(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(r,["label","variant","id","required","defaultValue"]);return e.createElement("div",null,e.createElement(t.TextField,c({id:a,label:n,variant:o,required:l,defaultValue:i},u)))};s.propTypes={label:n().string,id:n().string,variant:n().string,required:n().bool,defaultValue:n().string},s.defaultProps={label:"primary",id:"DTPTextField",variant:"outlined",required:!1,defaultValue:""};const f=s;var p=a(777),y=a.n(p),d=a(311),m=a.n(d);class b extends e.Component{constructor(e){super(e),this.handleChangePage=this.handleChangePage.bind(this),this.handleChangeRowsPerPage=this.handleChangeRowsPerPage.bind(this),this.state={page:0,rowsPerPage:10}}handleChangePage(e,t){this.setState={page:t}}handleChangeRowsPerPage(e){this.setState={page:0,rowsPerPage:e.target.value,open:!1}}render(){this.props.columns;var r=this.props.rows,n=this.props.style;return e.createElement(t.Paper,null,e.createElement(t.TableContainer,null,e.createElement(t.Table,{stickyHeader:!0,"aria-label":"collapsible table"},e.createElement(t.TableHead,null,e.createElement(t.TableRow,null,e.createElement(t.TableCell,null),this.props.columns.map((r=>e.createElement(t.TableCell,{key:r.id,align:r.align,style:{minWidth:r.minWidth}},r.label))))),e.createElement(t.TableBody,null,r.map((t=>e.createElement(g,{key:r.name,row:t,classes:n})))))),e.createElement(t.TablePagination,{rowsPerPageOptions:[10,25,100],component:"div",count:r.length,rowsPerPage:this.state.rowsPerPage,page:this.state.page,onChangePage:this.handleChangePage,onChangeRowsPerPage:this.handleChangeRowsPerPage}))}}const h=b;function g(r){var{row:n,classes:o}=r,[a,l]=e.useState(!1);return e.createElement(e.Fragment,null,e.createElement(t.TableRow,null,e.createElement(t.TableCell,null,e.createElement(t.IconButton,{"aria-label":"expand row",size:"small",onClick:()=>l(!a)},a?e.createElement(m(),null):e.createElement(y(),null))),e.createElement(t.TableCell,{component:"th",scope:"row"}," ",n.name),e.createElement(t.TableCell,{align:"right"},n.calories),e.createElement(t.TableCell,{align:"right"},n.fat),e.createElement(t.TableCell,{align:"right"},n.carbs),e.createElement(t.TableCell,{align:"right"},n.protein)),e.createElement(t.TableRow,null,e.createElement(t.TableCell,{style:{paddingBottom:0,paddingTop:0},colSpan:6},e.createElement(t.Collapse,{in:a,timeout:"auto",unmountOnExit:!0},e.createElement(t.Box,{margin:1},e.createElement(t.Typography,{variant:"h6",gutterBottom:!0,component:"div"},"History"),e.createElement(t.Table,{size:"small","aria-label":"purchases"},e.createElement(t.TableHead,null,e.createElement(t.TableRow,null,e.createElement(t.TableCell,null,"Date"),e.createElement(t.TableCell,null,"Customer"),e.createElement(t.TableCell,null,"Amount"),e.createElement(t.TableCell,null,"Total price ($)"))),e.createElement(t.TableBody,null,n.history.map((r=>e.createElement(t.TableRow,{key:r.date},e.createElement(t.TableCell,{component:"th",scope:"row"},r.date),e.createElement(t.TableCell,null,r.customerId),e.createElement(t.TableCell,null,r.amount),e.createElement(t.TableCell,null,Math.round(r.amount*n.price*100)/100)))))))))))}})(),l})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,